
"""
Day 9 - Python Pentesting Mini Tools
This script includes multiple small tools useful for scanning and information gathering during penetration testing.
Each tool is separated by section and can be run independently.
Usage: Run the script and follow instructions for the desired tool.
Note: All tools are for educational purposes only.
"""

import socket
import whois
import dns.resolver
import requests

# ------------------------
# 1. TCP Port Scanner
# ------------------------
def tcp_port_scanner(target, ports=[22, 80, 443, 8080]):
    print(f"[+] Scanning {target} for open ports...")
    for port in ports:
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(1)
                result = s.connect_ex((target, port))
                if result == 0:
                    print(f"[OPEN] Port {port} is open")
                else:
                    print(f"[CLOSED] Port {port} is closed")
        except Exception as e:
            print(f"[!] Error scanning port {port}: {e}")

# ------------------------
# 2. Banner Grabber
# ------------------------
def banner_grabber(target, port=80):
    try:
        with socket.socket() as s:
            s.settimeout(2)
            s.connect((target, port))
            s.send(b"HEAD / HTTP/1.1\r\nHost: " + bytes(target, "utf-8") + b"\r\n\r\n")
            banner = s.recv(1024)
            print("[+] Banner:
", banner.decode(errors="ignore"))
    except Exception as e:
        print(f"[!] Failed to grab banner: {e}")

# ------------------------
# 3. Subdomain Finder
# ------------------------
def subdomain_finder(domain, subdomains=["www", "mail", "ftp", "test", "admin"]):
    print(f"[+] Checking common subdomains for {domain}")
    for sub in subdomains:
        url = f"http://{sub}.{domain}"
        try:
            response = requests.get(url, timeout=2)
            print(f"[FOUND] {url} - Status: {response.status_code}")
        except requests.ConnectionError:
            print(f"[NOT FOUND] {url}")

# ------------------------
# 4. WHOIS Lookup
# ------------------------
def whois_lookup(domain):
    try:
        w = whois.whois(domain)
        print("[+] WHOIS Information:")
        print(w)
    except Exception as e:
        print(f"[!] WHOIS lookup failed: {e}")

# ------------------------
# 5. DNS Resolver
# ------------------------
def dns_lookup(domain):
    try:
        result = dns.resolver.resolve(domain, 'A')
        for ip in result:
            print(f"[+] {domain} has IP address: {ip}")
    except Exception as e:
        print(f"[!] DNS resolution failed: {e}")


